/**
 * @fileoverview Firestore Security Rules for CyberShelf.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (e.g., user profiles, cart items). Public data (e.g., ebooks, services) is
 * readable by all, but writable only by authorized users (currently unrestricted in this prototyping phase).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /ebooks/{ebookId}: Stores ebook details. Read access is public, write access is restricted.
 * - /services/{serviceId}: Stores service details. Read access is public, write access is restricted.
 * - /contact_requests/{contactRequestId}: Stores contact requests. Access is restricted.
 * - /users/{userId}/cart_items/{cartItemId}: Stores cart items. Access is restricted to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Ebooks and services are publicly readable.
 * - Schema validation is relaxed in this prototyping phase to allow for rapid iteration.
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization is used in this ruleset. More complex role-based access
 *  control would benefit from denormalizing roles directly onto secured documents.
 *
 * Structural Segregation:
 *  The ruleset uses structural segregation for user-specific data (profiles and cart items).
 *  Private data is stored under the /users/{userId} collection, while public data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Not for user profile edits, always false.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (get, list) - An unauthenticated user cannot read a profile.
     * @deny (update, delete) - Other user cannot modify this user profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to ebook documents.
     * @path /ebooks/{ebookId}
     * @allow (get, list) - Everyone can read ebook details.
     * @allow (create, update, delete) - Only authenticated user can create, update or delete ebooks.
     * @deny (create, update, delete) - Unauthenticated user cannot create, update or delete ebooks.
     * @principle Public read, restricted write.
     */
    match /ebooks/{ebookId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null;
    }

    /**
     * @description Controls access to service documents.
     * @path /services/{serviceId}
     * @allow (get, list) - Everyone can read service details.
     * @allow (create, update, delete) - Only authenticated user can create, update or delete services.
     * @deny (create, update, delete) - Unauthenticated user cannot create, update or delete services.
     * @principle Public read, restricted write.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null;
    }

    /**
     * @description Controls access to contact request documents.
     * @path /contact_requests/{contactRequestId}
     * @allow (get, list, create, update, delete) - Contact requests can not be operated on.
     * @deny (get, list, create, update, delete) - Unauthenticated user cannot operate on contact requests.
     * @principle Restricted access.
     */
    match /contact_requests/{contactRequestId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Controls access to cart item documents for a specific user.
     * @path /users/{userId}/cart_items/{cartItemId}
     * @allow (create) - Authenticated user can create cart items under their own user ID.
     * @allow (get, list) - Authenticated user can read cart items under their own user ID.
     * @allow (update, delete) - Authenticated user can modify cart items under their own user ID.
     * @deny (create) - An unauthenticated user cannot create cart items.
     * @deny (get, list) - An unauthenticated user cannot read cart items.
     * @deny (update, delete) - Other user cannot modify this user's cart items.
     * @principle Enforces document ownership for cart items.
     */
    match /users/{userId}/cart_items/{cartItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}