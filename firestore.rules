/**
 * @description This ruleset enforces a strict user-ownership model for cart items, public read access with admin-only writes for ebooks and services, and admin-only access for contact requests.
 * @dataStructure
 *   - /ebooks/{ebookId}: Stores ebook data. Publicly readable, admin-writeable.
 *   - /services/{serviceId}: Stores cybersecurity service data. Publicly readable, admin-writeable.
 *   - /contact_requests/{contactRequestId}: Stores contact form submissions. Publicly createable, admin-readable.
 *   - /users/{userId}/cart_items/{cartItemId}: Stores cart items for a specific user. User-owned data.
 * @keySecurityDecisions
 *   - Ebooks and services are publicly readable, but only admins can create, update, or delete them. Admin status is not explicitly checked in these rules (TODO: Implement admin role check).
 *   - Contact requests are publicly creatable, but only admins can read them (TODO: Implement admin role check).
 *   - User listing is disallowed in all collections.
 * @denormalizationForAuthorization Not applicable. Authorization is primarily path-based.
 * @structuralSegregation Data with different access requirements is stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read ebook information, but restricts creation, updating, and deletion to admins.
     * @path /ebooks/{ebookId}
     * @allow (get, list) - Any user can read ebook information.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete ebooks.
     * @principle Public read access with admin-only writes.
     */
    match /ebooks/{ebookId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation.
    }

    /**
     * @description Allows anyone to read service information, but restricts creation, updating, and deletion to admins.
     * @path /services/{serviceId}
     * @allow (get, list) - Any user can read service information.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete services.
     * @principle Public read access with admin-only writes.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin role validation.
    }

    /**
     * @description Allows anyone to create contact requests, but restricts reading, updating, and deletion to admins.
     * @path /contact_requests/{contactRequestId}
     * @allow (create) - Any user can create a contact request.
     * @deny (get, list, update, delete) - Non-admin users cannot read, update, or delete contact requests.
     * @principle Public write access with admin-only reads.
     */
    match /contact_requests/{contactRequestId} {
      allow create: if true;
      allow get, list, update, delete: if false; // TODO: Add admin role validation.
    }

    /**
     * @description Allows a user to manage their own cart items.
     * @path /users/{userId}/cart_items/{cartItemId}
     * @allow (create, get, list, update, delete) - The owner can manage their own cart items.
     * @deny (create, get, list, update, delete) - Users cannot manage other users' cart items.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/cart_items/{cartItemId} {
      allow read, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.ebookId is string;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}